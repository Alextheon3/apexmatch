services:
  # ==========================================
  # PostgreSQL Database
  # ==========================================
  postgres:
    image: postgres:15.5-alpine
    container_name: apexmatch-postgres
    environment:
      - POSTGRES_DB=apexmatch_db
      - POSTGRES_USER=apexmatch
      - POSTGRES_PASSWORD=apexmatch123
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - apexmatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apexmatch -d apexmatch_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==========================================
  # Redis Cache & Session Store
  # ==========================================
  redis:
    image: redis:7.2.3-alpine
    container_name: apexmatch-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - apexmatch-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # ==========================================
  # Backend API Service
  # ==========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: apexmatch-backend
    ports:
      - "8000:8000"
    environment:
      # Database
      - DATABASE_URL=postgresql://apexmatch:apexmatch123@postgres:5432/apexmatch_db
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # App Settings
      - ENVIRONMENT=development
      - DEBUG=true
      - SECRET_KEY=your-super-secret-jwt-key-change-this-in-production-12345678901234567890
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # AI Services (Optional)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      
      # Payment (Optional)
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
      
      # CORS
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
      
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - apexmatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # Frontend React Application
  # ==========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: apexmatch-frontend
    ports:
      - "3000:3000"
    environment:
      # API Configuration
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - VITE_API_VERSION=v1
      
      # App Settings
      - VITE_APP_NAME=ApexMatch
      - VITE_APP_VERSION=1.0.0
      - VITE_ENVIRONMENT=development
      
      # Feature Flags
      - VITE_ENABLE_AI_WINGMAN=true
      - VITE_ENABLE_PAYMENTS=true
      - VITE_ENABLE_WEBSOCKETS=true
      
      # External Services
      - VITE_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
      
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - apexmatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  apexmatch-network:
    driver: bridge